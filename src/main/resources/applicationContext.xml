<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!--第二种方式：加载一个properties文件-->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="location" value="classpath:jdbc.properties"/>-->
    <!--</bean>-->

    <!-- 第三种方式：加载多个properties文件 -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:common.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>
    <!-- 开启注解模式 -->
    <context:component-scan base-package="com.tpadsz.after"/>

    <!-- 阿里 druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${jdbcUrl}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

    </bean>
    <!-- JDBC 事务管理器, 在service层面上实现事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="select*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <!-- 剩下的其他方法. -->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 事物处理 -->
    <aop:config>
        <!--目录结构，该目录下类注解：@BLTService("xxxService")-->
        <aop:pointcut id="pc" expression="execution(* com.tpadsz.after.service..*(..))"/>
        <aop:advisor pointcut-ref="pc" advice-ref="txAdvice"/>
    </aop:config>

    <!-- mybatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.tpadsz.after.entity"></property>
        <property name="configLocation" value="classpath:mybatisConfig.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tpadsz.after.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!-- 连接配置 -->
    <rabbit:connection-factory id="myConnectionFactory" host="${rabbitmq.host}" port="${rabbitmq.port}"/>
    <rabbit:admin id="mqAdmin" connection-factory="myConnectionFactory"/>
    <rabbit:template id="amqpTemplate" connection-factory="myConnectionFactory" exchange="direct_exchange"/>
    <!-- 交换机定义 -->
    <!--
        交换机：一个交换机可以绑定多个队列，一个队列也可以绑定到多个交换机上。
        如果没有队列绑定到交换机上，则发送到该交换机上的信息则会丢失。
        direct模式:消息与一个特定的路由器完全匹配，才会转发
        topic模式:按模式匹配
     -->
    <rabbit:topic-exchange name="spring_exchange" durable="true" auto-delete="false" declared-by="mqAdmin">
        <rabbit:bindings>
            <!-- 设置消息Queue匹配的pattern (direct模式为key) -->
            <rabbit:binding queue="message_queue" pattern="topic.*.message"/>
            <rabbit:binding queue="message_all" pattern="topic.#"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- 定义direct exchange，绑定queueTest -->
    <rabbit:direct-exchange name="direct_exchange" durable="true" auto-delete="false" declared-by="mqAdmin">
        <rabbit:bindings>
            <rabbit:binding queue="blt_queue" key="${rabbitmq.key}"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>
    <!-- durable 是否持久化 exclusive 仅创建者可以使用的私有队列，断开后自动删除，auto-delete当所有消费端连接断开后，是否自动删除队列 -->
    <rabbit:queue id="blt_queue" name="${rabbitmq.queue}" durable="true" auto-delete="false" exclusive="false"/>
    <rabbit:queue id="message_queue" name="topic.test.message" durable="true" auto-delete="false" exclusive="false"/>
    <rabbit:queue id="message_all" name="topic.messages" durable="true" auto-delete="false" exclusive="false"/>
    <!-- 配置监听 -->
    <rabbit:listener-container connection-factory="myConnectionFactory" acknowledge="auto">
        <rabbit:listener queues="message_all" ref="messageConsumer"/>
    </rabbit:listener-container>

</beans>